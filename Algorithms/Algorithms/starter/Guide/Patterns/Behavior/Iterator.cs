using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
/*
 * https://metanit.com/sharp/patterns/3.5.php
Паттерн Итератор (Iterator) предоставляет абстрактный интерфейс для последовательного доступа ко всем элементам составного 
    объекта без раскрытия его внутренней структуры.
Наверное, всем программистам, работающим с языком C#, приходилось иметь дело с циклом foreach, который перебирает объекты 
    в массиве или коллекции. При этом встроенных классов коллекций существует множество, и каждая из них отличается по своей 
    структуре и поведению.
Ключевым моментом, который позволяет осуществить перебор коллекций с помощью foreach, является применения этими классами 
    коллекций паттерна итератор, или проще говоря пары интерфейсов IEnumerable / IEnumerator. Интерфейс IEnumerator определяет 
    функционал для перебора внутренних объектов в контейнере:
        public interface IEnumerator
        {
            bool MoveNext(); // перемещение на одну позицию вперед в контейнере элементов
            object Current {get;}  // текущий элемент в контейнере
            void Reset(); // перемещение в начало контейнера
        }
А интерфейс IEnumerable использует IEnumerator для получения итератора для конкретного типа объекта:
        public interface IEnumerable
        {
            IEnumerator GetEnumerator();
        }
Используя данные интерфейсы, мы можем свести к одному шаблону - с помощью цикла foreach - любые составные объекты.

Когда использовать итераторы?
    Когда необходимо осуществить обход объекта без раскрытия его внутренней структуры
    Когда имеется набор составных объектов, и надо обеспечить единый интерфейс для их перебора
    Когда необходимо предоставить несколько альтернативных вариантов перебора одного и того же объекта
*/
namespace sterter.Guide.Patterns.Behavior
{
    class Iterator
    {
    }
}
